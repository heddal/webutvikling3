{"version":3,"sources":["actions/DestinationAction.js","actions/SearchAction.js","components/MainCards.js","components/Searchbox.js","pages/Main.js","reducers/SortReducers.js","reducers/DestinationReducer.js","reducers/LengthReducer.js","reducers/FilterReducer.js","reducers/RootReducer.js","components/BackButton.js","pages/Destination.js","components/FilterCards.js","actions/LengthAction.js","components/Sorting.js","actions/SortingActions.js","pages/SearchPage.js","actions/ContinentAction.js","pages/WordCloud.js","App.js","serviceWorker.js","index.js"],"names":["showDestination","destinationID","dispatch","getState","type","changeSearchword","word","Cards","props","getDataFromDb","fetch","then","data","json","res","setState","handleButtonClick","denneID","newPopularity","updateDB","state","popularity","intervalIsSet","bind","this","interval","setInterval","clearInterval","idToUpdate","axios","post","id","update","className","map","dat","key","name","src","img","alt","style","textTransform","to","onClick","_id","Component","connect","searchWord","withRouter","filter","prop","classes","makeStyles","theme","root","display","flexWrap","justifyContent","margin","spacing","textField","flexBasis","backgroundColor","useStyles","React","useState","search","values","setValues","TextField","clsx","variant","label","value","onChange","event","target","onKeyUp","keyPressed","keyCode","history","push","InputProps","endAdornment","InputAdornment","position","Main","Grid","container","justify","alignItems","direction","MainCards","sortReducersDefaultState","sortType","sortReducers","action","initState","destinationReducer","length","lengthReducer","continent","filterReducer","rootReducer","combineReducers","sort","destination","BackButton","former","path","location","pathname","includes","xmlns","width","height","fill","viewBox","d","Destination","country","source","Paper","description","FilterCards","sortData","items","hasMoreItems","maxItems","window","addEventListener","loadMore","sorted","a","b","setLength","setTimeout","dataCards","pageStart","hasMore","useWindow","slice","Sorting","anchorEl","type1","type2","handleClick","currentTarget","handleClose","handleSort","sortBy","Button","aria-controls","aria-haspopup","color","Menu","keepMounted","open","Boolean","onClose","MenuItem","SearchPage","continentFilter","activeButton","getContinent","e","activebutton","document","getElementById","padding","marginTop","marginBottom","textAlign","flexDirection","paddingLeft","paddingRight","fontFamily","borderRadius","rotate","Math","random","d3","renameKeys","s","charAt","toUpperCase","i","new_data","capitalize","font","store","createStore","applyMiddleware","thunk","App","exact","component","WordCloud","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SAEaA,EAAkB,SAACC,GAC5B,OAAO,SAACC,EAAUC,GACdD,EAAS,CACLE,KAAM,mBACNH,oB,iBCNCI,EAAmB,SAACC,GAC7B,OAAO,SAACJ,EAAUC,GACdD,EAAS,CACLE,KAAM,oBAAqBE,WCMjCC,E,YAEF,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KAiCVC,cAAgB,WACdC,MAAM,0BACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAS,EAAKC,SAAS,CAC3BH,KAAME,EAAIF,WAtCI,EAsDnBI,kBAAoB,SAACC,EAASC,GAAV,OAA4B,SAAAV,GAC/C,EAAKA,MAAMR,gBAAgBiB,GAC3BC,IACA,EAAKC,SAASF,EAASC,GACvB,EAAKV,MAAMH,iBAAiB,MAxD1B,EAAKe,MAAQ,CACXR,KAAM,GACNS,WAAY,KACZC,eAAe,GAGjB,EAAKH,SAAW,EAAKA,SAASI,KAAd,gBARA,E,iFAiBlB,GADAC,KAAKf,iBACAe,KAAKJ,MAAME,cAAe,CAC7B,IAAIG,EAAWC,YAAYF,KAAKf,cAAe,KAC/Ce,KAAKT,SAAS,CAAEO,cAAeG,O,6CAO7BD,KAAKJ,MAAME,gBACbK,cAAcH,KAAKJ,MAAME,eACzBE,KAAKT,SAAS,CAAEO,cAAe,U,+BAgB1BM,EAAYV,GACnBW,IAAMC,KAAK,kBAAmB,CAC5BC,GAAIH,EACJI,OAAQ,CAAEX,WAAYH,O,+BAehB,IAAD,OACAN,EAASY,KAAKJ,MAAdR,KACP,OACE,yBAAKqB,UAAU,QACdrB,EAAKsB,KAAI,SAAAC,GAAG,OACX,yBAAKF,UAAY,iBAAiBG,IAAKD,EAAIE,MACvC,yBAAKJ,UAAY,aACf,yBAAKK,IAAOH,EAAII,IAAKC,IAAI,SAE3B,yBAAKP,UAAY,aAAjB,IAA8B,uBAAGQ,MAAS,CAACC,cAAe,eAAgBP,EAAIE,MAA9E,KACA,yBAAKJ,UAAY,aACf,kBAAC,IAAD,CAAMU,GAAG,eAAeV,UAAU,QAChC,4BAAQW,QAAS,EAAK5B,kBAAkBmB,EAAIU,IAAKV,EAAId,aAArD,wB,GA5EIyB,aAiGLC,cAAQ,MATI,SAAC7C,GAC1B,MAAO,CACLF,gBAAiB,SAACC,GAAD,OAAmBC,EAASF,EAAgBC,KAC7DI,iBAAkB,SAAC2C,GAAD,OAAgB9C,EAASG,EAAiB2C,QAMjDD,CAAkCxC,G,ySC5FjD,IA+Ee0C,cAAWF,aARF,SAAC3B,GAEvB,MAAO,CACLd,KAFac,EAAM8B,OAENF,eATU,SAAC9C,GAC1B,MAAO,CACLG,iBAAkB,SAACC,GAAD,OAAUJ,EAASG,EAAiBC,QAYhCyC,EA/ER,SAACvC,GAGnB,IAqBuB2C,EANbC,EAfQC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,UAElBC,OAAQ,CACNA,OAAQL,EAAMM,QAAQ,IAExBC,UAAW,CACTC,UAAW,IACXC,gBAAiB,YAIDC,GAlBS,EAmBGC,IAAMC,SAAS,CACvCC,OAAQ3D,EAAMF,OApBO,mBAmBlB8D,EAnBkB,KAmBVC,EAnBU,KA2C3B,OACE,yBAAKpC,UAAWmB,EAAQG,MACtB,kBAACe,EAAA,EAAD,CACEvC,GAAG,aACHE,UAAWsC,YAAKnB,EAAQO,OAAQP,EAAQS,WACxCW,QAAQ,WACRC,MAAM,kBACNC,MAAON,EAAOD,OACdQ,UA3BexB,EA2BQ,SA3BA,SAAAyB,GAC3BP,E,yVAAU,CAAD,GAAMD,EAAN,eAAejB,EAAOyB,EAAMC,OAAOH,WA2BxCI,SAAsBtE,EAAMuE,WAvBP,SAAAH,GACH,KAAlBA,EAAMI,UACc,KAAlBZ,EAAOD,OACT3D,EAAMH,iBAAiB,OAEvBG,EAAMH,iBAAiB+D,EAAOD,QAChC3D,EAAMyE,QAAQC,KAAK,WAAYd,EAAOD,WAkBpCgB,WAAY,CACVC,aACE,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OACvB,kBAAC,IAAD,eC7BCC,E,2MA/BXnE,MAAQ,G,wEAEJ,OACI,yBAAKa,UAAU,OACX,kBAACuD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,SAASC,UAAU,SAAU3D,UAAU,QAC/E,kBAACuD,EAAA,EAAD,CAAMC,WAAS,EAACxD,UAAU,QACtB,yBAAKA,UAAU,WACX,iDAGA,mEAGA,kBAAC,EAAD,MACA,0DAEE,kBAAC,IAAD,CAAMU,GAAG,aAAaV,UAAU,QAAhC,iBAMV,kBAACuD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAS9B,QAAS,GACnC,kBAACiC,EAAD,a,GAxBR/C,a,iBCPbgD,EAA2B,CAC7BC,SAAU,IAYCC,EATM,WAA+C,IAA9C5E,EAA6C,uDAArC0E,EAA0BG,EAAW,uCAC/D,OAAOA,EAAO7F,MACV,IAAK,YACD,MAAO,CAAE2F,SAAUE,EAAOF,UAC9B,QACI,OAAO3E,ICXb8E,EAAY,CACdjG,cAAe,IAWJkG,EARY,WAAgC,IAA/B/E,EAA8B,uDAAtB8E,EAAWD,EAAW,uCACtD,OAAOA,EAAO7F,MACV,IAAK,mBACD,MAAM,CAACH,cAAegG,EAAOhG,eACjC,QAAS,OAAOmB,ICRlB8E,EAAY,CACdE,OAAQ,GAWGC,EARO,WAAgC,IAA/BjF,EAA8B,uDAAtB8E,EAAWD,EAAW,uCACjD,OAAOA,EAAO7F,MACV,IAAK,aACD,MAAM,CAACgG,OAAQH,EAAOG,QAC1B,QAAS,OAAOhF,ICRlB8E,EAAY,CACdlD,WAAY,GACZsD,UAAW,IAcAC,EAXO,WAAgC,IAA/BnF,EAA8B,uDAAtB8E,EAAWD,EAAW,uCACjD,OAAOA,EAAO7F,MACV,IAAK,oBACD,MAAO,CAAC4C,WAAYiD,EAAO3F,KAAMgG,UAAWlF,EAAMkF,WACtD,IAAK,mBACD,MAAO,CAACtD,WAAY5B,EAAM4B,WAAYsD,UAAWL,EAAOK,WAC5D,QAAS,OAAOlF,ICGToF,EAPKC,YAAgB,CAChCvD,OAAQqD,EACRG,KAAMV,EACNW,YAAaR,EACbC,OAAQC,I,yBCJNO,G,kNAEFC,OAAS,G,oFAIL,IAAMC,EAAOtF,KAAKhB,MAAMuG,SAASC,SAC7BF,EAAKG,SAAS,YAAuB,eAATH,GAAoD,IAA3BtF,KAAKhB,MAAMF,KAAK8F,OACrE5E,KAAKqF,OAAS,IAEdrF,KAAKqF,OAAS,Y,+BAQlB,OACI,kBAAC,IAAD,CAAMlE,GAAInB,KAAKqF,QAAS,4BAAQ5E,UAAY,eAApB,IAAmC,yBAAKiF,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,UAAUC,QAAQ,aAAY,0BAAMC,EAAE,sEAA7I,KAAxB,S,GAnBazE,cAgCVG,cAAWF,aAPF,SAAC3B,GAErB,MAAO,CACLd,KAFac,EAAM8B,OAENF,cAIOD,CAAyB6D,IC5B7CY,E,2MACFpG,MAAQ,CACJR,KAAM,GACNmB,GAAI,EACJM,KAAM,KACNoF,QAAS,KACTnB,UAAW,KACXoB,OAAQ,KACRnF,IAAK,M,EAsBP9B,cAAgB,WACdC,MAAM,oBAAsB,EAAKF,MAAMP,eACpCU,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAS,EAAKC,SAAS,CAC3BH,KAAME,EAAIF,W,mFArBd,GADAY,KAAKf,iBACAe,KAAKJ,MAAME,cAAe,CAC7B,IAAIG,EAAWC,YAAYF,KAAKf,cAAe,KAC/Ce,KAAKT,SAAS,CAAEO,cAAeG,O,6CAO7BD,KAAKJ,MAAME,gBACbK,cAAcH,KAAKJ,MAAME,eACzBE,KAAKT,SAAS,CAAEO,cAAe,U,+BAejC,IAAMV,EAAOY,KAAKJ,MAAMR,KACxB,OACI,yBAAKqB,UAAY,yBACb,yBAAKA,UAAY,QACb,kBAAC,EAAD,OAEJ,kBAACuD,EAAA,EAAD,CACIC,WAAS,EACT7B,QAAS,EACT3B,UAAU,SAGV,kBAAC0F,EAAA,EAAD,CAAO1F,UAAU,SACb,6BACI,gCAAMrB,EAAKyB,KAAX,KACA,gCAAMzB,EAAK6G,QAAX,KAAsB7G,EAAK0F,WAC3B,yBAAKrE,UAAU,SACb,yBAAKK,IAAO1B,EAAK2B,IAAKC,IAAI,SAE5B,+BAAK5B,EAAKgH,aACV,2DAAkChH,EAAK8G,gB,GA3DzC5E,aA4EXC,eANS,SAAC3B,GACrB,MAAO,CACLnB,cAAemB,EAAMuF,YAAY1G,iBAIxB8C,CAAyByE,G,iBC9ElCK,E,YAEJ,WAAYrH,GAAQ,IAAD,8BACjB,4CAAMA,KAgCRC,cAAgB,WACU,QAApB,EAAKD,MAAMF,KACgB,QAAzB,EAAKE,MAAM8F,UACb5F,MAAM,gBACLC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAS,EAAKgH,SAAShH,EAAIF,SAGjCF,MAAM,eAAiB,EAAKF,MAAM8F,WACjC3F,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAS,EAAKgH,SAAShH,EAAIF,SAGD,QAAzB,EAAKJ,MAAM8F,UACpB5F,MAAM,eAAiB,EAAKF,MAAMF,MAC/BK,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAS,EAAKgH,SAAShH,EAAIF,SAGnCF,MAAM,eAAiB,EAAKF,MAAM8F,UAAY,IAAM,EAAK9F,MAAMF,MAC9DK,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAS,EAAKgH,SAAShH,EAAIF,UAtDlB,EAyEnBO,SAAW,SAACS,EAAYV,GAEtBW,IAAMC,KAAK,kBAAmB,CAC5BC,GAAIH,EACJI,OAAQ,CAAEX,WAAYH,MA7EP,EAmFnBF,kBAAoB,SAACC,EAASC,GAAV,OAA4B,SAAAV,GAC9C,EAAKA,MAAMR,gBAAgBiB,GAC3BC,IACA,EAAKC,SAASF,EAASC,KApFvB,EAAKE,MAAQ,CACXR,KAAM,GACNU,eAAe,EACfyG,MAAO,GACPC,cAAc,EACdC,SAAU,GAEV,EAAKH,SAAW,EAAKA,SAASvG,KAAd,gBATD,E,iFAiBjB,GADAC,KAAKf,iBACAe,KAAKJ,MAAME,cAAe,CAC7B,IAAIG,EAAWC,YAAYF,KAAKf,cAAe,KAC/Ce,KAAKT,SAAS,CAAEO,cAAeG,IAEjCyG,OAAOC,iBAAiB,SAAU3G,KAAK4G,SAAS7G,KAAKC,OAAO,K,6CAIxDA,KAAKJ,MAAME,gBACbK,cAAcH,KAAKJ,MAAME,eACzBE,KAAKT,SAAS,CAAEO,cAAe,U,+BA8B1BV,GACP,GAAGY,KAAKhB,MAAMuF,SAAS,CACrB,GAA2B,QAAxBvE,KAAKhB,MAAMuF,SAAmB,CAC/B,IAAMsC,EAASzH,EAAK8F,MAAK,SAAC4B,EAAEC,GAAH,OAAUD,EAAEjG,KAAOkG,EAAElG,KAAQ,GAAG,KACzDb,KAAKT,SAAS,CAACH,KAAMyH,IAEvB,GAA2B,eAAxB7G,KAAKhB,MAAMuF,SAA0B,CACtC,IAAMsC,EAASzH,EAAK8F,MAAK,SAAC4B,EAAEC,GAAH,OAAUD,EAAEjH,WAAakH,EAAElH,YAAe,EAAE,KACrEG,KAAKT,SAAS,CAACH,KAAMyH,UAElB7G,KAAKT,SAAS,CAACH,KAAMA,IAC5BY,KAAKJ,MAAM6G,SAAWzG,KAAKhB,MAAMgI,UAAU5H,EAAKwF,U,iCAsBtC,IAAD,OACL5E,KAAKJ,MAAM2G,OAASvG,KAAKJ,MAAM6G,SAC/BzG,KAAKT,SAAS,CAAEiH,cAAc,IAE9BS,YAAW,WACX,EAAK1H,SAAS,CAAEgH,MAAO,EAAK3G,MAAM2G,MAAQ,OAC3C,O,+BAMK,IAAD,OAEDW,EADUlH,KAAKJ,MAAdR,KACgBsB,KAAI,SAAAC,GACzB,OACE,yBAAKF,UAAU,OAAOG,IAAKD,EAAIU,KAC7B,yBAAKZ,UAAY,kBACb,yBAAKA,UAAY,aAAjB,IAA8B,yBAAKK,IAAOH,EAAII,IAAKC,IAAI,QAAvD,KACA,yBAAKP,UAAY,aAAjB,IAA8B,+BAAKE,EAAIE,KAAT,KAA9B,KACA,yBAAKJ,UAAY,aAAjB,IAA+B,kBAAC,IAAD,CAAMU,GAAG,eAAeV,UAAU,QAAO,4BAAQW,QAAS,EAAK5B,kBAAkBmB,EAAIU,IAAKV,EAAId,aAArD,eAAzC,KAA/B,UAKV,OACE,6BACE,kBAAC,IAAD,CACEsH,UAAW,EACXP,SAAU5G,KAAK4G,SAAS7G,KAAKC,MAC7BoH,QAASpH,KAAKJ,MAAM4G,aACpBa,WAAa,GAEb,yBAAKpG,MAAO,CAACe,QAAQ,OAAQC,SAAS,OAAQC,eAAe,SAAU0D,OAAQ,SACxEsB,EAAUI,MAAM,EAAGtH,KAAKJ,MAAM2G,c,GA9HrBjF,aA0JXC,eAlBS,SAAC3B,GACvB,IAAM8B,EAAS9B,EAAM8B,OACfwD,EAAOtF,EAAMsF,KACnB,MAAO,CACLpG,KAAM4C,EAAOF,WACbsD,UAAWpD,EAAOoD,UAClBP,SAAUW,EAAKX,SACfK,OAAQhF,EAAMgF,OAAOA,WAIE,SAAClG,GAC1B,MAAO,CACLF,gBAAiB,SAACC,GAAD,OAAmBC,EAASF,EAAgBC,KAC7DuI,UAAW,SAACpC,GAAD,OAAYlG,EC/JF,SAACkG,GACtB,OAAO,SAAClG,EAAUC,GACdD,EAAS,CACLE,KAAM,aACNgG,YD2JwBoC,CAAUpC,QAI/BrD,CAA6C8E,G,6BE5JrDkB,G,2MACH3H,MAAO,CACH4H,SAAU,KACVjD,SAAU,GACVkD,MAAO,MACPC,MAAO,c,EAGXC,YAAc,SAAAvE,GACZ,EAAK7D,SAAS,CAACiI,SAAUpE,EAAMwE,iB,EAGjCC,YAAc,WACZ,EAAKtI,SAAS,CAACiI,SAAU,Q,EAG3BM,WAAa,SAACvD,GAAD,OAAc,SAAA5C,GACvB,EAAK3C,MAAM+I,OAAOxD,K,wEAKtB,OACE,6BACE,kBAACyD,GAAA,EAAD,CAAQC,gBAAc,cAAcC,gBAAc,OAAOC,MAAM,UAAUnF,QAAQ,WAAW5B,QAASpB,KAAK2H,aAA1G,WAGA,kBAACS,GAAA,EAAD,CACE7H,GAAG,cACHiH,SAAUxH,KAAKJ,MAAM4H,SACrBa,aAAW,EACXC,KAAMC,QAAQvI,KAAKJ,MAAM4H,UACzBgB,QAASxI,KAAK6H,aAEd,kBAACY,GAAA,EAAD,CAAUrH,QAASpB,KAAK8H,WAAW9H,KAAKJ,MAAM6H,QAA9C,IAAwDzH,KAAKJ,MAAM6H,MAAnE,KACA,kBAACgB,GAAA,EAAD,CAAUrH,QAASpB,KAAK8H,WAAW9H,KAAKJ,MAAM8H,QAA9C,IAAwD1H,KAAKJ,MAAM8H,MAAnE,W,GAnCapG,aAkDNC,eAAQ,MAPI,SAAC7C,GAC1B,MAAO,CACHqJ,OAAQ,SAACxD,GAAD,OAAc7F,EChDR,SAAC6F,GACnB,OAAO,SAAC7F,EAAUC,GACdD,EAAS,CACLE,KAAM,YACN2F,cD4C2BwD,CAAOxD,QAK7BhD,CAAkCgG,IE5C7CmB,I,mBACF,WAAY1J,GAAO,IAAD,8BACd,4CAAMA,KAgBZ2I,YAAc,SAAC7C,GAAD,OAAe,SAAAnD,GACzB,EAAK3C,MAAM2J,gBAAgB7D,KAhBzB,EAAKlF,MAAO,CACR2G,MAAO,GACPC,cAAc,EACdoC,aAAc,OAElB,EAAKC,aAAe,EAAKA,aAAa9I,KAAlB,gBAPN,E,iFAWa,IAA3BC,KAAKhB,MAAMF,KAAK8F,QAClB5E,KAAKhB,MAAMH,iBAAiB,OAE9BmB,KAAKhB,MAAM2J,gBAAgB,S,mCAOd7D,EAAWgE,GACpB9I,KAAKhB,MAAM2J,gBAAgB7D,GAC3B,IAAMiE,EAAe/I,KAAKJ,MAAMgJ,aAC5BG,IAAiBD,EAAEzF,OAAO9C,KAC5ByI,SAASC,eAAeF,GAActI,UAAY,GAClDuI,SAASC,eAAeH,EAAEzF,OAAO9C,IAAIE,UAAY,SACjDT,KAAKT,SAAS,CAACqJ,aAAcE,EAAEzF,OAAO9C,Q,+BAMjC,IAAD,OACR,OACI,kBAACyD,EAAA,EAAD,CACEC,WAAS,EACT7B,QAAS,EACTnB,MAAO,CAACiI,QAAS,GAAIvD,MAAO,OAAQwD,UAAU,GAAIC,aAAa,IAC/DhF,UAAU,SACVF,QAAQ,SACRC,WAAW,UAET,yBAAKlD,MAAO,CAAC0E,MAAM,QAAS0D,UAAU,WACpC,yBAAKpI,MAAO,CAACiB,eAAgB,gBAAiBF,QAAS,OAAQsH,cAAe,MAAOnF,WAAY,SAAUoF,YAAY,KAAMC,aAAc,OACzI,kBAAC,EAAD,MACA,wBAAIvI,MAAO,CAACiI,QAAQ,IAApB,kBAAwClJ,KAAKhB,MAAMF,KAAnD,KACA,kBAAC,GAAD,OAEA,kBAAC,EAAD,MACF,yBAAK2B,UAAY,eAAeQ,MAAO,CAACoI,UAAW,SAAUI,WAAY,+BAAgCC,aAAc,SACrH,4BAAQjJ,UAAY,SAASF,GAAK,MAAOa,QAAW,SAAC0H,GAAD,OAAO,EAAKD,aAAa,MAAOC,KAApF,SACA,4BAAQvI,GAAK,SAASa,QAAW,SAAC0H,GAAD,OAAO,EAAKD,aAAa,SAAUC,KAApE,YACA,4BAAQvI,GAAK,UAAUa,QAAW,SAAC0H,GAAD,OAAO,EAAKD,aAAa,UAAWC,KAAtE,aACA,4BAAQvI,GAAK,OAAOa,QAAW,SAAC0H,GAAD,OAAO,EAAKD,aAAa,OAAQC,KAAhE,UACA,4BAAQvI,GAAK,SAASa,QAAW,SAAC0H,GAAD,OAAO,EAAKD,aAAa,SAAUC,KAApE,YACA,4BAAQvI,GAAK,UAAUa,QAAW,SAAC0H,GAAD,OAAO,EAAKD,aAAa,UAAWC,KAAtE,eAGR,kBAAC,EAAD,W,GA5DexH,cAgFVC,gBAdS,SAAC3B,GAErB,MAAO,CACLd,KAFac,EAAM8B,OAENF,eAIQ,SAAC9C,GACxB,MAAO,CACLiK,gBAAiB,SAAC7D,GAAD,OAAepG,ECxFP,SAACoG,GAC5B,OAAO,SAACpG,EAAUC,GACdD,EAAS,CACLE,KAAM,mBAAoBkG,eDqFS6D,CAAgB7D,KACzDjG,iBAAkB,SAACC,GAAD,OAAUJ,EAASG,EAAiBC,QAI7CyC,CAA6CmH,I,oBEzFtDiB,GAAS,SAAA7K,GAAI,OAAmB,IAAf8K,KAAKC,UA2DbC,G,2MAxDblK,MAAO,CACLR,KAAM,I,EAYVH,cAAgB,WACdC,MAAM,6BACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAS,EAAKyK,WAAWzK,EAAIF,U,mFARrCY,KAAKf,kB,iCAaI+K,GACT,MAAiB,kBAANA,EAAuB,GAC3BA,EAAEC,OAAO,GAAGC,cAAgBF,EAAE1C,MAAM,K,iCAKlClI,GACT,IACI+K,EADAC,EAAY,GAEhB,IAAKD,EAAI,EAAGA,EAAI/K,EAAKwF,OAAQuF,IAAK,CAChC,IAAIpE,EAAI,CAAC,KAAQ/F,KAAKqK,WAAWjL,EAAK+K,GAAL,MAAkB,MAAS/K,EAAK+K,GAAL,YAC5DC,EAAS1G,KAAKqC,GAEhB/F,KAAKT,SAAS,CACZH,KAAMgL,M,+BAKN,OACE,yBAAKnJ,MAAO,CAACiB,eAAe,SAAUF,QAAQ,OAAQ4D,OAAO,QAASzB,WAAW,WACjF,kBAAC,EAAD,MAEE,kBAAC,KAAD,CAEE/E,KAAMY,KAAKJ,MAAMR,KACjBkL,KAAK,SACLX,OAAQA,U,GAlDDrI,aCOXiJ,GAAQC,YAAYxF,EAAayF,YAAgBC,MAmBxCC,G,iLAbX,OACE,kBAAC,IAAD,CAAUJ,MAASA,IACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOjF,KAAK,IAAIsF,OAAK,EAACC,UAAW9G,IACjC,kBAAC,IAAD,CAAOuB,KAAK,aAAauF,UAAWC,KACpC,kBAAC,IAAD,CAAOxF,KAAK,UAAUuF,UAAWnC,KACjC,kBAAC,IAAD,CAAOpD,KAAK,eAAeuF,UAAW7E,U,GAThC1E,aCJEiH,QACW,cAA7B7B,OAAOnB,SAASwF,UAEe,UAA7BrE,OAAOnB,SAASwF,UAEhBrE,OAAOnB,SAASwF,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMlM,MAAK,SAAAmM,GACjCA,EAAaC,iB","file":"static/js/main.b93a0816.chunk.js","sourcesContent":["\n\nexport const showDestination = (destinationID) => {\n    return (dispatch, getState) => {\n        dispatch({\n            type: 'SHOW_DESTINATION', \n            destinationID\n        })\n    \n    }\n};","export const changeSearchword = (word) => {\n    return (dispatch, getState) => {\n        dispatch({\n            type: 'CHANGE_SEARCHWORD', word,\n        })\n    }\n};","import React, { Component } from 'react';\nimport './Card.css';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux'\nimport { showDestination } from '../actions/DestinationAction';\nimport axios from 'axios'\nimport { changeSearchword } from '../actions/SearchAction'\n\n\nclass Cards extends Component {\n    // initialize our state\n    constructor(props){\n      super(props)\n      this.state = {\n        data: [],\n        popularity: null,\n        intervalIsSet: false,\n      };\n\n      this.updateDB = this.updateDB.bind(this)\n\n    }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('/api/threeMostPopular/')\n      .then((data) => data.json())\n      .then((res) => this.setState({\n        data: res.data\n      }));\n  };\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB(idToUpdate, newPopularity){\n    axios.post('/api/updateData', {\n      id: idToUpdate,\n      update: { popularity: newPopularity },\n    });\n  }\n\n\n\n  // Show right destination and update the popularity of this destination\n   handleButtonClick = (denneID, newPopularity) => props =>{ \n    this.props.showDestination(denneID);\n    newPopularity++;\n    this.updateDB(denneID, newPopularity);\n    this.props.changeSearchword(\"\")\n  };\n\n  // Retrieve data to one card\n  render() {\n    const {data}  = this.state;\n    return (\n      <div className=\"trio\">\n      {data.map(dat => (\n        <div className = 'card-container' key={dat.name}>\n            <div className = 'card-item'>\n              <img src = {dat.img} alt=\"alt\" />\n            </div>\n            <div className = 'card-item'> <p style = {{textTransform: 'capitalize'}}>{dat.name}</p> </div>\n            <div className = 'card-item' >\n              <Link to=\"/Destination\" className='link'>\n                <button onClick={this.handleButtonClick(dat._id, dat.popularity)}>\n                  Show More\n                </button>\n              </Link>\n            </div>\n        </div>\n      ))}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    showDestination: (destinationID) => dispatch(showDestination(destinationID)),\n    changeSearchword: (searchWord) => dispatch(changeSearchword(searchWord))\n  }\n};\n\n\n\nexport default connect(null, mapDispatchToProps)(Cards);\n","/* the search box is made with code from https://material-ui.com */\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/SearchOutlined';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport { connect } from 'react-redux'\nimport { changeSearchword } from '../actions/SearchAction'\nimport { withRouter } from 'react-router-dom';\n\n\n\nconst Searchbox = (props) => {\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  textField: {\n    flexBasis: 500,\n    backgroundColor: 'white',\n  },\n}));\n\n    const classes = useStyles();\n    const [values, setValues] = React.useState({\n        search: props.word\n    });\n\n//Adds keypressed to search to make up the search word\n  const handleChange = prop => event => { \n    setValues({ ...values, [prop]: event.target.value });\n  };\n  \n//If the key pressed is the enter-key, the searchword will be updated in store\n  const keyPressed = prop => event => { \n    if (event.keyCode === 13) { //13 is enter\n      if (values.search === \"\"){\n        props.changeSearchword(\"all\")\n      } else{\n        props.changeSearchword(values.search)}\n      props.history.push('/search/'+ values.search);\n    }\n\n  };\n\n  \n\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        id=\"search-box\"\n        className={clsx(classes.margin, classes.textField)}\n        variant=\"outlined\"\n        label=\"search location\"\n        value={values.search}\n        onChange={handleChange('search')}\n        onKeyUp = {keyPressed(props.keyPressed)}\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <SearchIcon/>\n            </InputAdornment>\n          ),\n        }}\n      />\n    </div>\n  );\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changeSearchword: (word) => dispatch(changeSearchword(word))\n  }\n};\n\nconst mapStateToProps = (state) => { //give us accsess to the data in store\n  const filter = state.filter\n  return {\n    word: filter.searchWord\n  }\n}\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Searchbox));","// this is the main page\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport './Main.css';\nimport MainCards from '../components/MainCards';\nimport Searchbox from '../components/Searchbox';\n\n\nclass Main extends Component {\n    state = {  }\n    render() {\n        return (\n            <div className=\"alt\">\n                <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\"  className=\"main\">\n                    <Grid container className=\"text\">\n                        <div className=\"content\">\n                            <h3>\n                                Dream destination\n                            </h3>\n                            <h4>\n                                Where is your ultimate destination?\n                            </h4>\n                            <Searchbox/>\n                            <p>\n                              To se the most visited pages\n                              <Link to=\"/wordcloud\" className='link'>\n                                click here\n                              </Link>\n                            </p>\n                        </div>\n                    </Grid>\n                    <Grid container justify=\"center\" spacing={2}>\n                           <MainCards/>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","// filter reducers for the locations\n\nconst sortReducersDefaultState = {\n    sortType: \"\"\n};\n\nconst sortReducers = (state = sortReducersDefaultState, action) => {\n    switch(action.type) {\n        case 'SORT_TYPE':\n            return { sortType: action.sortType };\n        default:\n            return state;\n    }\n}\n\nexport default sortReducers;\n\n","const initState = {\n    destinationID: \"\"\n}\n\nconst destinationReducer = (state = initState, action) => {\n    switch(action.type) {\n        case 'SHOW_DESTINATION':\n            return{destinationID: action.destinationID}\n        default: return state;\n    };\n}\n\nexport default destinationReducer","const initState = {\n    length: 0,\n}\n\nconst lengthReducer = (state = initState, action) => {\n    switch(action.type) {\n        case 'GET_LENGTH':\n            return{length: action.length}\n        default: return state;\n    };\n}\n\nexport default lengthReducer;","const initState = {\n    searchWord: '',\n    continent: ''\n}\n\nconst filterReducer = (state = initState, action) => {\n    switch(action.type) {\n        case 'CHANGE_SEARCHWORD':\n            return {searchWord: action.word, continent: state.continent}\n        case 'CONTINENT_FILTER':\n            return {searchWord: state.searchWord, continent: action.continent} \n        default: return state\n    \n}\n}\n\nexport default filterReducer\n","import sortReducers from './SortReducers';\nimport destinationReducer from './DestinationReducer';\nimport lengthReducer from './LengthReducer';\nimport filterReducer from './FilterReducer';\nimport { combineReducers } from 'redux';\n\n\nconst rootReducer = combineReducers({\n    filter: filterReducer,\n    sort: sortReducers,\n    destination: destinationReducer,\n    length: lengthReducer,\n});\n\nexport default rootReducer","import React, { Component } from 'react';\nimport './BackButton.css';\nimport { withRouter } from \"react-router-dom\";\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux'\n\n\nclass BackButton extends Component {\n\n    former = \"\"\n    \n    //backarrow to go back to right path considering where you are\n    componentWillMount(){\n        const path = this.props.location.pathname\n        if (path.includes(\"/search\") || path === '/wordcloud' || this.props.word.length === 0 ){\n            this.former = \"/\"\n        } else { \n            this.former = \"/search\"\n        }}\n\n\n    \n\n\n    render(){\n        return ( \n            <Link to={this.former} ><button className = \"back-button\"> <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"#999999\" viewBox=\"0 0 18 18\"><path d=\"M15 8.25H5.87l4.19-4.19L9 3 3 9l6 6 1.06-1.06-4.19-4.19H15v-1.5z\"/></svg> </button> </Link>\n        );\n    }\n\n}\n\nconst mapStateToProps = (state) => { //give us accsess to the data in store\n    const filter = state.filter\n    return {\n      word: filter.searchWord\n    }\n  }  \n\nexport default withRouter(connect(mapStateToProps)(BackButton));","//Page that shows more information about the destination chosen\n\nimport React, { Component } from 'react';\nimport './Destination.css';\nimport { Grid, Paper } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport './Destination.css'\nimport BackButton from '../components/BackButton';\n\n\n\nclass Destination extends Component {\n    state = {\n        data: [],\n        id: 0,\n        name: null,\n        country: null,\n        continent: null,\n        source: null,\n        img: null\n    }\n\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n          let interval = setInterval(this.getDataFromDb, 1000);\n          this.setState({ intervalIsSet: interval });\n        }\n      }\n    \n      // never let a process live forever\n      // always kill a process everytime we are done using it\n      componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n          clearInterval(this.state.intervalIsSet);\n          this.setState({ intervalIsSet: null });\n        }\n      }\n    \n      // our first get method that uses our backend api to\n      // fetch data from our data base\n      getDataFromDb = () => {\n        fetch('/api/getDataFrom/' + this.props.destinationID)\n          .then((data) => data.json())\n          .then((res) => this.setState({ \n            data: res.data\n          }));\n      };\n\n    render() {\n        const data = this.state.data;\n        return(\n            <div className = 'container-destination'>\n                <div className = 'back'>\n                    <BackButton/>\n                </div>\n                <Grid\n                    container\n                    spacing={8}\n                    className='papir'\n\n                >\n                    <Paper className='paper'>\n                        <div >\n                            <h2> {data.name} </h2>\n                            <h4> {data.country}, {data.continent}</h4>\n                            <div className='bilde'> \n                              <img src = {data.img} alt=\"alt\" /> \n                            </div>\n                            <p> {data.description}</p>\n                            <p >This info is retrieved from: {data.source}</p>\n                        </div>\n                    </Paper>\n                </Grid>\n                \n                \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => { //give us accsess to the data in store\n    return {\n      destinationID: state.destination.destinationID\n    }\n  }\n\nexport default connect(mapStateToProps)(Destination);","import React, { Component } from 'react';\nimport './Card.css';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { showDestination } from '../actions/DestinationAction';\nimport { setLength } from '../actions/LengthAction';\n\nclass FilterCards extends Component {\n  // initialize our state\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [],\n      intervalIsSet: false,\n      items: 20,\n      hasMoreItems: true,\n      maxItems: 0,\n      }\n      this.sortData = this.sortData.bind(this)\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    };\n    window.addEventListener('scroll', this.loadMore.bind(this), false);\n  }  \n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    if (this.props.word === \"all\"){\n      if (this.props.continent === \"all\"){\n        fetch('/api/getData')\n        .then((data) => data.json())  \n        .then((res) => this.sortData(res.data));\n\n      } else {\n        fetch('/api/search/' + this.props.continent)\n        .then((data) => data.json())  \n        .then((res) => this.sortData(res.data));\n      }\n      \n    } else if (this.props.continent === 'all') {\n      fetch('/api/search/' + this.props.word)\n        .then((data) => data.json())  \n        .then((res) => this.sortData(res.data));\n  \n    } else {\n      fetch('/api/search/' + this.props.continent + '/' + this.props.word )\n      .then((data) => data.json())  \n      .then((res) => this.sortData(res.data))\n  }}\n\n  sortData(data){\n    if(this.props.sortType){\n      if(this.props.sortType === 'A-Z'){\n        const sorted = data.sort((a,b) => (a.name > b.name) ? 1:-1)\n        this.setState({data: sorted});\n      }\n      if(this.props.sortType === 'Popularity'){\n        const sorted = data.sort((a,b) => (a.popularity > b.popularity) ? -1:1)\n        this.setState({data: sorted});\n      }\n    } else{this.setState({data: data})}\n    this.state.maxItems = this.props.setLength(data.length);\n  }\n\n\n  // this will update the popularity count of the destination\n  updateDB = (idToUpdate, newPopularity) => {\n\n    axios.post('/api/updateData', {\n      id: idToUpdate,\n      update: { popularity: newPopularity },\n    });\n  };\n\n\n  // Show right destination and update the popularity of this destination\n  handleButtonClick = (denneID, newPopularity) => props =>{ \n    this.props.showDestination(denneID);\n    newPopularity++;\n    this.updateDB(denneID, newPopularity);\n  };\n\n  // to infinate scroll\n  loadMore() {\n    if (this.state.items >= this.state.maxItems){\n        this.setState({ hasMoreItems: false});\n    } else{\n        setTimeout(() => {\n        this.setState({ items: this.state.items + 20});\n    }, 1000);\n    }\n      \n  }\n\n\n  render() { \n    const {data}  = this.state;\n    const dataCards = data.map(dat => {\n      return (\n        <div className=\"trio\" key={dat._id}>\n          <div className = 'card-container' >\n              <div className = 'card-item'> <img src = {dat.img} alt=\"alt\" /> </div>\n              <div className = 'card-item'> <p> {dat.name} </p> </div>\n              <div className = 'card-item' > <Link to=\"/Destination\" className='link'><button onClick={this.handleButtonClick(dat._id, dat.popularity)}> Show More </button> </Link> </div>\n          </div> \n        </div>\n      ) ;\n    });\n    return (\n      <div >\n        <InfiniteScroll\n          pageStart={0}\n          loadMore={this.loadMore.bind(this)}\n          hasMore={this.state.hasMoreItems}\n          useWindow = {false}\n        >\n          <div style={{display:'flex', flexWrap:'wrap', justifyContent:'center', height: \"100%\"}}>\n                {dataCards.slice(0, this.state.items)}\n          </div>\n              \n          \n        </InfiniteScroll>\n      </div>);\n    \n  }\n}\n\nconst mapStateToProps = (state) => { //give us accsess to the data in store\n  const filter = state.filter\n  const sort = state.sort\n  return {\n    word: filter.searchWord,\n    continent: filter.continent,\n    sortType: sort.sortType,\n    length: state.length.length,\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    showDestination: (destinationID) => dispatch(showDestination(destinationID)),\n    setLength: (length) => dispatch(setLength(length))\n  }\n};\n \nexport default connect(mapStateToProps, mapDispatchToProps)(FilterCards);","export const setLength = (length) => {\n    return (dispatch, getState) => {\n        dispatch({\n            type: 'GET_LENGTH', \n            length\n        })\n    \n    }\n};","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { sortBy } from '../actions/SortingActions'\nimport { connect } from 'react-redux';\n\n class Sorting extends Component {\n    state= {\n        anchorEl: null,\n        sortType: '',\n        type1: 'A-Z',\n        type2: 'Popularity',\n    }\n  \n    handleClick = event => {\n      this.setState({anchorEl: event.currentTarget});\n    };\n\n    handleClose = () => {\n      this.setState({anchorEl: null})\n    }\n  \n    handleSort = (sortType) => prop =>{\n        this.props.sortBy(sortType);\n    };\n\n  \n    render(){\n    return (\n      <div>\n        <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" color=\"primary\" variant=\"outlined\" onClick={this.handleClick}>\n          Sort by\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={this.state.anchorEl}\n          keepMounted\n          open={Boolean(this.state.anchorEl)}\n          onClose={this.handleClose}\n        >\n          <MenuItem onClick={this.handleSort(this.state.type1)}> {this.state.type1} </MenuItem>\n          <MenuItem onClick={this.handleSort(this.state.type2)}> {this.state.type2} </MenuItem>\n        </Menu>\n      </div>\n    );\n    }\n  }\n\n\n  const mapDispatchToProps = (dispatch) => {\n    return {\n        sortBy: (sortType) => dispatch(sortBy(sortType))\n    }\n  };\n\n\n  export default connect(null, mapDispatchToProps)(Sorting);","// functions that return redux actions\n\n\n// sort by different types, ex. continent, facilities..\nexport const sortBy = (sortType) => {\n    return (dispatch, getState) => {\n        dispatch({\n            type: 'SORT_TYPE', \n            sortType\n        })\n    \n    }\n};","import React, { Component } from 'react';\nimport Searchbox from '../components/Searchbox'\nimport { Grid } from '@material-ui/core';\nimport FilterCards from '../components/FilterCards';\nimport { connect } from 'react-redux';\nimport BackButton from '../components/BackButton';\nimport Sorting from '../components/Sorting';\nimport { continentFilter } from '../actions/ContinentAction';\nimport { changeSearchword } from '../actions/SearchAction';\nimport './Button.css'\n\n\n\nclass SearchPage extends Component {\n    constructor(props){\n        super(props)\n        this.state ={\n            items: 10,\n            hasMoreItems: true,\n            activeButton: 'all'\n        };\n        this.getContinent = this.getContinent.bind(this)\n    }\n\n  componentDidMount() {\n    if (this.props.word.length === 0){\n      this.props.changeSearchword(\"all\")\n    }\n    this.props.continentFilter(\"all\")\n  }\n\n  handleClick = (continent) => prop =>{\n      this.props.continentFilter(continent)\n  };\n\n    getContinent(continent, e){\n        this.props.continentFilter(continent);\n        const activebutton = this.state.activeButton\n        if (activebutton !== e.target.id){\n          document.getElementById(activebutton).className = ''\n          document.getElementById(e.target.id).className = 'active'\n          this.setState({activeButton: e.target.id});\n        }\n        \n    }\n    \n\n    render( ) { \n      return ( \n          <Grid \n            container\n            spacing={8}\n            style={{padding: 20, width: '100%', marginTop:36, marginBottom:36}}\n            direction='column'\n            justify='center'\n            alignItems='center'\n            >\n              <div style={{width:'100vw', textAlign:'center'}}>\n                <div style={{justifyContent: \"space-between\", display: 'flex', flexDirection: 'row', alignItems: 'center', paddingLeft:'3%', paddingRight: '5%'}}>\n                  <BackButton/>\n                  <h2 style={{padding:8}}> Results from \"{this.props.word}\"</h2>\n                  <Sorting />\n                </div>\n                  <Searchbox/>\n                <div className = \"button-group\" style={{textAlign: 'center', fontFamily: 'Arial, Helvetica, sans-serif', borderRadius: '10px'}}>\n                  <button className = 'active' id = 'all'  onClick = {(e) => this.getContinent('all', e)}> All </button>\n                  <button id = 'africa' onClick = {(e) => this.getContinent('Africa', e)}> Africa </button>\n                  <button id = 'america' onClick = {(e) => this.getContinent('America', e)}> America </button>\n                  <button id = 'asia' onClick = {(e) => this.getContinent('Asia', e)}> Asia </button>\n                  <button id = 'europe' onClick = {(e) => this.getContinent('Europe', e)}> Europe </button>\n                  <button id = 'oceania' onClick = {(e) => this.getContinent('Oceania', e)}> Oceania </button>\n                </div>\n              </div>\n          <FilterCards/>\n        </Grid>\n\n\n  )}}\n\nconst mapStateToProps = (state) => { //give us accsess to the data in store\n    const filter = state.filter\n    return {\n      word: filter.searchWord\n    }\n  }\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      continentFilter: (continent) => dispatch(continentFilter(continent)),\n      changeSearchword: (word) => dispatch(changeSearchword(word))\n    }\n  };\n \nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);","export const continentFilter = (continent) => {\n    return (dispatch, getState) => {\n        dispatch({\n            type: 'CONTINENT_FILTER', continent\n        })\n    }\n};","import React, { Component } from 'react';\nimport WordCloud from 'react-d3-cloud';\nimport BackButton from '../components/BackButton';\n\nconst rotate = word => Math.random() *360;\n\nclass d3 extends Component {\n  state= {\n    data: [],\n  }\n\n// when component mounts, first thing it does is fetch all existing data in our db\n// then we incorporate a polling logic so that we can easily see if our db has\n// changed and implement those changes into our UI\ncomponentDidMount() {\n  this.getDataFromDb();\n}\n\n// our first get method that uses our backend api to\n// fetch data from our data base\ngetDataFromDb = () => {\n  fetch('/api/wordcloudPopularity/')\n    .then((data) => data.json())\n    .then((res) => this.renameKeys(res.data));\n};\n\n// Capitalize words\n// Eg. have cities as Rome, not rome.\ncapitalize(s) {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n// WordCloud needs data on the form [{text: Rome, value: 2}, {text: Paris, value: 5}]\n// This function rename keys\nrenameKeys(data) { // list of elements [{name: Rome, popularity: 2}, {name: Paris, popularity: 5}]\n  var new_data =  [];\n  var i;\n  for (i = 0; i < data.length; i++) {\n    var d = {'text': this.capitalize(data[i]['name']), 'value': data[i]['popularity']}\n    new_data.push(d);\n  }\n  this.setState({\n    data: new_data\n  })\n}\n\n  render(){\n    return(\n      <div style={{justifyContent:\"center\", display:\"flex\", height:\"100vh\", alignItems:\"center\"}}>\n      <BackButton />\n\n        <WordCloud\n\n          data={this.state.data}\n          font='Impact'\n          rotate={rotate}\n        />\n      </div>\n    )\n  }\n}\n\nexport default d3;\n","import React, { Component } from 'react';\nimport Main from './pages/Main';\nimport './App.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers/RootReducer';\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport Destination from './pages/Destination'\nimport SearchPage from './pages/SearchPage'\nimport WordCloud from './pages/WordCloud'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\n\nconst store = createStore(rootReducer, applyMiddleware(thunk)) ;\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store = {store}>\n          <Router>\n            <Route path=\"/\" exact component={Main} />\n            <Route path=\"/wordcloud\" component={WordCloud} />\n            <Route path=\"/search\" component={SearchPage} />\n            <Route path=\"/destination\" component={Destination} />\n          </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}